use.miden::kernels::tx::constants
use.miden::kernels::tx::memory
use.std::crypto::hashes::native
use.std::mem

#Â ERRORS
# =================================================================================================

# Provided note data does not match the commitment
const.ERR_NOTE_DATA_MISMATCH=0x00020040

# Number of note inputs exceeded the maximum limit of 128
const.ERR_NOTE_TOO_MANY_INPUTS=0x0002001B

#! Writes the data currently on the advice stack into the memory at the specified location and
#! verifies that the hash of the written data is equal to the provided hash.
#!
#! Inputs:  [start_ptr, end_ptr, HASH]
#! Outputs: []
proc.write_advice_data_to_memory
    # prepare the stack for reading from the advice stack
    padw padw padw
    # => [PAD, PAD, PAD, start_ptr, end_ptr, HASH]

    # read the data from advice stack to memory
    exec.mem::pipe_double_words_to_memory
    # => [PERM, PERM, PERM, end_ptr, HASH]

    # extract the digest
    exec.native::state_to_digest
    # => [DIGEST, end_ptr, HASH]

    # drop pointer for reading from memory
    movup.4 drop
    # => [DIGEST, HASH]

    # assert the computed hash is equal to the expected hash
    assert_eqw.err=ERR_NOTE_DATA_MISMATCH
    # => []
end

#! Writes the assets of the currently executing note into memory starting at the specified address.
#!
#! Inputs: [dest_ptr]
#! Outputs: [num_assets, dest_ptr]
#!
#! - dest_ptr is the memory address to write the assets.
#! - num_assets is the number of assets in the currently executing note.
export.get_assets
    padw push.0
    # => [0, 0, 0, 0, 0, dest_ptr]

    # get the current input note assets info
    exec.memory::get_note_assets_info_ptr
    syscall.exec_kernel_proc
    # => [ASSETS_HASH, num_assets, dest_ptr]

    # load the asset data from the advice map to the advice stack
    adv.push_mapval
    # => [ASSETS_HASH, num_assets, dest_ptr]

    # calculate number of assets rounded up to an even number
    dup.4 dup is_odd add
    # => [even_num_assets, ASSETS_HASH, num_assets, dest_ptr]

    # calculate the start and end pointer for reading to memory
    dup.6 add dup.6
    # => [start_ptr, end_ptr, ASSETS_HASH, num_assets, dest_ptr]

    # write the data from the advice stack into memory
    exec.write_advice_data_to_memory
    # => [num_assets, dest_ptr]
end

#! Loads the note's inputs to `dest_ptr`.
#!
#! Inputs:
#!   Stack: [dest_ptr]
#!   Advice Map: { INPUTS_HASH: [inputs_len, INPUTS] }
#! Outputs:
#!   Stack: [num_inputs, dest_ptr]
#!
#! Where:
#! - dest_ptr is the memory address to write the inputs.
#! - INPUTS_HASH, sequential hash of the padded note's inputs.
#! - inputs_len, the note's input count.
#! - INPUTS, the data corresponding to the note's inputs.
export.get_inputs
    padw 
    exec.memory::get_note_inputs_hash_ptr
    syscall.exec_kernel_proc
    # => [INPUTS_HASH, dest_ptr]

    # load the inputs from the advice map to the advice stack
    adv.push_mapval
    # => [INPUTS_HASH, dest_ptr]

    adv_push.1
    # => [num_inputs, INPUTS_HASH, dest_ptr]

    # validate the input length
    dup exec.constants::get_max_inputs_per_note lte assert.err=ERR_NOTE_TOO_MANY_INPUTS
    # => [num_inputs, INPUTS_HASH, dest_ptr]

    # calculate the number of words required to store the inputs
    dup movdn.5 u32divmod.4 neq.0 add
    # => [num_words, INPUTS_HASH, num_inputs, dest_ptr]

    # round up the number of words the next multiple of 2
    dup is_odd add
    # => [even_num_words, INPUTS_HASH, num_inputs, dest_ptr]

    # calculate the start and end pointer for reading to memory
    dup.6 add dup.6
    # => [start_ptr, end_ptr, INPUTS_HASH, num_inputs, dest_ptr]

    # check the input data matches the commitment, and write it to memory.
    exec.write_advice_data_to_memory
    # => [num_inputs, dest_ptr]
end

#! Returns the sender of the note currently being processed. Panics if a note is not being
#! processed.
#!
#! Inputs: []
#! Outputs: [sender]
#!
#! - sender is the sender of the note currently being processed.
export.get_sender
    push.0
    # => [0]

    exec.memory::get_note_sender_ptr
    syscall.exec_kernel_proc
    # => [sender]
end

#! Returns the serial number of the note currently being processed.
#! Panics if no note is not being processed.
#!
#! Inputs: []
#! Outputs: [SERIAL_NUMBER]
#!
#! - SERIAL_NUMBER is the serial number of the note currently being processed.
export.get_serial_number
    padw
    # => [0, 0, 0, 0]

    exec.memory::get_note_serial_number_ptr
    syscall.exec_kernel_proc
    # => [SERIAL_NUMBER]
end

#! Computes hash of note inputs starting at the specified memory address.
#!
#! This procedure divides the hashing process into two parts: hashing pairs of words using 
#! `hash_memory_even` procedure and hashing the remaining values using the `hperm` instruction.
#!
#! If the number if inputs is 0, procedure returns the empty word: [0, 0, 0, 0].
#!
#! Inputs:  [inputs_ptr, num_inputs]
#! Outputs: [HASH]
#! Cycles: 
#! - If number of elements divides by 8: 56 cycles + 3 * words
#! - Else: 189 cycles + 3 * words
#!
#! Panics if num_inputs is greater than 128.
export.compute_inputs_hash
    # check that number of inputs is less than 128
    dup.1 push.128 u32assert2 u32lte assert

    # move number of inputs to the top of the stack 
    swap
    # => [num_inputs, inputs_ptr]

    # get the number of double words
    u32divmod.8 swap
    # => [num_inputs/8, num_inputs%8, inputs_ptr]

    # get the end_addr for hash_memory_even procedure (end address for pairs of words)
    mul.2 dup.2 add movup.2
    # => [inputs_ptr, end_addr, num_inputs%8]

    # get the padding flag to add it to the capacity part
    dup.2 eq.0 not
    # => [pad_flag, inputs_ptr, end_addr, num_inputs%8]
    
    # prepare hasher state for RPO permutation 
    push.0.0.0 padw padw 
    # => [C, B, A, inputs_ptr, end_addr, num_inputs%8]

    # hash every pair of words
    exec.native::hash_memory_even
    # => [C', B', A', inputs_ptr', end_addr, num_inputs%8] where inputs_ptr' = end_addr

    # hash remaining input values if there are any left
    # if num_inputs%8 is ZERO and there are no elements to hash
    dup.14 eq.0
    if.true
        # clean the stack
        exec.native::state_to_digest
        swapw drop drop drop movdn.4
        # => [B']
    else
        # load the remaining double word
        mem_stream
        # => [E, D, A', inputs_ptr'+2, end_addr, num_inputs%8]

        # clean the stack
        movup.12 drop movup.12 drop
        # => [E, D, A', num_inputs%8]

        # get the number of elements we need to drop
        # notice that drop_counter could be any number from 1 to 7
        push.8 movup.13 sub movdn.12
        # => [E, D, A', drop_counter]

        ### 0th value ########################################################
        
        # if current value is the last value to drop ("cycle" number equals to the number of values
        # to drop), push 1 instead of 0 to the stack
        dup.12 eq.1 swap

        # we need to drop first value anyway, since number of values is not divisible by 8
        drop movdn.6
        # => [e_2, e_1, e_0, d_3, d_2, d_1, 0/1, d_0, A', drop_counter]

        ### 1st value ########################################################
        
        # prepare the second element of the E Word for cdrop instruction
        # if current value is the last value to drop ("cycle" number equals to the number of values 
        # to drop), push 1 instead of 0 to the stack
        dup.12 eq.2 swap
        # => [e_2, 0, e_1, e_0, d_3, d_2, d_1, 0/1, d_0, A', drop_counter]

        # push latch variable onto the stack; this will be the control for the cdrop instruction
        push.0
        # => [latch = 0, e_2, 0, e_1, e_0, d_3, d_2, d_1, 0, d_0, A', drop_counter]

        # get the flag whether the drop counter is equal 1
        dup.14 eq.1
        # => [drop_counter == 1, latch = 0, e_2, 0, e_1, e_0, d_3, d_2, d_1, 0, d_0, A', drop_counter]

        # update the latch: if drop_counter == 1, latch will become 1
        or
        # => [latch', e_2, 0, e_1, e_0, d_3, d_2, d_1, 0, d_0, A', drop_counter]

        # save the latch value 
        dup movdn.14
        # => [latch', e_2, 0, e_1, e_0, d_3, d_2, d_1, 0, d_0, A', latch', drop_counter]

        # if latch == 1, drop 0; otherwise drop e_1
        cdrop
        # => [e_2_or_0, e_1, e_0, d_3, d_2, d_1, 0, d_0, A', latch', drop_counter]

        # move the calculated value down the stack 
        movdn.6
        # => [e_1, e_0, d_3, d_2, d_1, 0, e_2_or_0, d_0, A', latch', drop_counter]

        ### 2nd value ########################################################

        # repeat the above process but now compare drop_counter to 2
        dup.13 eq.3 swap
        movup.13 dup.14 eq.2 or
        dup movdn.14
        cdrop movdn.6
        # => [e_0, d_3, d_2, d_1, 0, e_2_or_0, e_1_or_0, d_0, A', latch', drop_counter]

        ### 3rd value ########################################################

        # repeat the above process but now compare drop_counter to 3
        dup.13 eq.4 swap
        movup.13 dup.14 eq.3 or
        dup movdn.14
        cdrop movdn.6
        # => [d_3, d_2, d_1, 0, e_2_or_0, e_1_or_0, e_0_or_0, d_0, A', latch', drop_counter]

        ### 4th value ########################################################

        # repeat the above process but now compare drop_counter to 4
        dup.13 eq.5 swap
        movup.13 dup.14 eq.4 or
        dup movdn.14
        cdrop movdn.6
        # => [d_2, d_1, 0, e_2_or_0, e_1_or_0, e_0_or_0, d_3_or_0, d_0, A', latch', drop_counter]

        ### 5th value ########################################################

        # repeat the above process but now compare drop_counter to 5
        dup.13 eq.6 swap
        movup.13 dup.14 eq.5 or
        dup movdn.14
        cdrop movdn.6
        # => [d_1, 0, e_2_or_0, e_1_or_0, e_0_or_0, d_3_or_0, d_2_or_0, d_0, A', latch', drop_counter]

        ### 6th value ########################################################

        # repeat the above process but now compare drop_counter to 6
        dup.13 eq.7 swap
        movup.13 movup.14 eq.6 or
        cdrop movdn.6
        # => [0, e_2_or_0, e_1_or_0, e_0_or_0, d_3_or_0, d_2_or_0, d_1_or_0, d_0, A']
        # or in other words
        # => [C, B, A', ... ]
        # notice that we don't need to check the d_0 value: entering the else branch means that 
        # we have number of elements not divisible by 8, so we will have at least one element to 
        # hash here (which turns out to be d_0)

        hperm
        # => [F, E, D]

        exec.native::state_to_digest
        # => [E]
    end
end

